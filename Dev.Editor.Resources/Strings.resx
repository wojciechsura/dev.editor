<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Ribbon.Home.Group.Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Ribbon.Home.Group.File" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="Ribbon.Tab.Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Ribbon.Home.File.New" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="Ribbon.Home.File.Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="Ribbon.Home.File.Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Ribbon.Home.File.SaveAs" xml:space="preserve">
    <value>Save as</value>
  </data>
  <data name="Ribbon.Home.Edit.Copy" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="Ribbon.Home.Edit.Cut" xml:space="preserve">
    <value>Cut</value>
  </data>
  <data name="Ribbon.Home.Edit.Paste" xml:space="preserve">
    <value>Paste</value>
  </data>
  <data name="Ribbon.Home.Edit.Redo" xml:space="preserve">
    <value>Redo</value>
  </data>
  <data name="Ribbon.Home.Edit.Undo" xml:space="preserve">
    <value>Undo</value>
  </data>
  <data name="BlankDocName" xml:space="preserve">
    <value>Document</value>
  </data>
  <data name="Ribbon.Home.Group.Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Ribbon.Home.Search.Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Ribbon.Home.Search.Replace" xml:space="preserve">
    <value>Replace</value>
  </data>
  <data name="DefaultDialogTitle" xml:space="preserve">
    <value>Dev.Editor</value>
  </data>
  <data name="DefaultFilter" xml:space="preserve">
    <value>All files (*.*)|*.*</value>
  </data>
  <data name="SearchWindow.Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SearchWindow.SearchedText" xml:space="preserve">
    <value>Text to search</value>
  </data>
  <data name="SearchWindow.CaseSensitive" xml:space="preserve">
    <value>Case sensitive</value>
  </data>
  <data name="SearchWindow.Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="SearchWindow.FindNext" xml:space="preserve">
    <value>Find next</value>
  </data>
  <data name="SearchWindow.OnlyFullWords" xml:space="preserve">
    <value>Only full words</value>
  </data>
  <data name="SearchWindow.Replace" xml:space="preserve">
    <value>Replace</value>
  </data>
  <data name="SearchWindow.ReplaceWith" xml:space="preserve">
    <value>Replace with</value>
  </data>
  <data name="SearchWindow.SearchMode" xml:space="preserve">
    <value>Search mode</value>
  </data>
  <data name="SearchWindow.SearchModeExtended" xml:space="preserve">
    <value>Extended (\n, \t etc.)</value>
  </data>
  <data name="SearchWindow.SearchModeNormal" xml:space="preserve">
    <value>Normal</value>
  </data>
  <data name="SearchWindow.SearchModeRegex" xml:space="preserve">
    <value>Regular expressions</value>
  </data>
  <data name="SearchWindow.SearchOptions" xml:space="preserve">
    <value>Search options</value>
  </data>
  <data name="SearchWindow.Title" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SearchWindow.ReplaceAll" xml:space="preserve">
    <value>Replace all</value>
  </data>
  <data name="SearchWindow.SearchTab" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SearchWindow.ReplaceTab" xml:space="preserve">
    <value>Replace</value>
  </data>
  <data name="SearchWindow.SearchBackwards" xml:space="preserve">
    <value>Search backwards</value>
  </data>
  <data name="Ribbon.Home.Search.FindNext" xml:space="preserve">
    <value>Find next</value>
  </data>
  <data name="BlankDocumentName" xml:space="preserve">
    <value>Document</value>
  </data>
  <data name="Message.CannotOpenFile" xml:space="preserve">
    <value>Cannot open file {0}. Error: {1}</value>
  </data>
  <data name="Message.CannotSaveFile" xml:space="preserve">
    <value>Cannot save file {0}. Error: {1}</value>
  </data>
  <data name="Message.FileNotSaved" xml:space="preserve">
    <value>Do you want to save document {0} before closing?</value>
  </data>
  <data name="Search.SearchTitle" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Search.ReplaceTitle" xml:space="preserve">
    <value>Replace</value>
  </data>
  <data name="DefaultMessageboxTitle" xml:space="preserve">
    <value>Dev.Editor</value>
  </data>
  <data name="Message.InvalidSearchPattern" xml:space="preserve">
    <value>Invalid search pattern!</value>
  </data>
  <data name="Message.NoMorePatternsFound" xml:space="preserve">
    <value>Cannot find any occurrences of entered text.</value>
  </data>
  <data name="SearchWindow.InSelection" xml:space="preserve">
    <value>In selection</value>
  </data>
  <data name="Ribbon.Tab.View" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="Ribbon.View.Group.Editor" xml:space="preserve">
    <value>Editor</value>
  </data>
  <data name="Ribbon.View.Editor.WordWrap" xml:space="preserve">
    <value>Word wrap</value>
  </data>
  <data name="Ribbon.View.Editor.ShowLineNumbers" xml:space="preserve">
    <value>Line numbers</value>
  </data>
  <data name="Message.CannotSaveConfiguration" xml:space="preserve">
    <value>Cannot save configuration file. Are you sure you want to exit?</value>
  </data>
  <data name="Message.CannotRestoreFile" xml:space="preserve">
    <value>Cannot restore file {0}. Error message: {1}</value>
  </data>
  <data name="Ribbon.View.View.SyntaxHighlighting" xml:space="preserve">
    <value>Syntax highlighting</value>
  </data>
  <data name="SyntaxHighlighting.None" xml:space="preserve">
    <value>(none)</value>
  </data>
  <data name="Ribbon.Tab.Lines" xml:space="preserve">
    <value>Lines</value>
  </data>
  <data name="Ribbon.Lines.Group.Ordering" xml:space="preserve">
    <value>Ordering</value>
  </data>
  <data name="Ribbon.Lines.Ordering.SortAscending" xml:space="preserve">
    <value>Sort ascending</value>
  </data>
  <data name="Ribbon.Lines.Ordering.SortDescending" xml:space="preserve">
    <value>Sort descending</value>
  </data>
  <data name="Ribbon.Home.Group.Navigation" xml:space="preserve">
    <value>Navigation</value>
  </data>
  <data name="Ribbon.Home.Navigation.Navigate" xml:space="preserve">
    <value>Navigation</value>
  </data>
  <data name="NavigationPopup.Header" xml:space="preserve">
    <value>Navigation</value>
  </data>
  <data name="Ribbon.Lines.Group.Cleanup" xml:space="preserve">
    <value>Cleanup</value>
  </data>
  <data name="Ribbon.Lines.Cleanup.RemoveEmptyLines" xml:space="preserve">
    <value>Remove empty lines</value>
  </data>
  <data name="Ribbon.Lines.Cleanup.RemoveWhitespaceLines" xml:space="preserve">
    <value>Remove whitespace lines</value>
  </data>
  <data name="Tool.Explorer.Title" xml:space="preserve">
    <value>Files</value>
  </data>
  <data name="Ribbon.Home.File.NewHex" xml:space="preserve">
    <value>New hex editor</value>
  </data>
  <data name="Ribbon.Home.File.OpenHex" xml:space="preserve">
    <value>Open in hex editor</value>
  </data>
  <data name="Configuration.Behavior" xml:space="preserve">
    <value>Behavior</value>
  </data>
  <data name="Configuration.Title" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="Configuration" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="Configuration.Behavior.ClosingBehavior" xml:space="preserve">
    <value>Closing behavior</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Configuration.Behavior.ClosingBehavior.Comment" xml:space="preserve">
    <value>Choose, how application should behave when closing:</value>
  </data>
  <data name="Configuration.Behavior.ClosingBehavior.Standard" xml:space="preserve">
    <value>Standard</value>
  </data>
  <data name="Configuration.Behavior.ClosingBehavior.Standard.Comment" xml:space="preserve">
    <value>Dev.Editor will close all documents upon closing and start with blank new document</value>
  </data>
  <data name="Configuration.Behavior.ClosingBehavior.Fluent" xml:space="preserve">
    <value>Fluent</value>
  </data>
  <data name="Configuration.Behavior.ClosingBehavior.Fluent.Comment" xml:space="preserve">
    <value>Dev.Editor will store all open documents and restore them on startup (including unsaved changes)</value>
  </data>
  <data name="Ribbon.View.Group.Interface" xml:space="preserve">
    <value>Interface</value>
  </data>
  <data name="Ribbon.View.Interface.SidePanel" xml:space="preserve">
    <value>Side panel</value>
  </data>
  <data name="Ribbon.View.SidePanelPlacement.Left" xml:space="preserve">
    <value>Left</value>
  </data>
  <data name="Ribbon.View.SidePanelPlacement.Right" xml:space="preserve">
    <value>Right</value>
  </data>
  <data name="Ribbon.View.SidePanelPlacement.Hidden" xml:space="preserve">
    <value>Hidden</value>
  </data>
  <data name="Tool.BinDefinitions.Title" xml:space="preserve">
    <value>Binary definitions</value>
  </data>
  <data name="Dialog.BinDefinition.Title" xml:space="preserve">
    <value>Binary definition</value>
  </data>
  <data name="Dialog.BinDefinition.Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NewBinaryDefinitionContents" xml:space="preserve">
    <value>// This is Dev.Editor's {0} binary file definition.
</value>
  </data>
  <data name="Message.CannotAddBinDefinition" xml:space="preserve">
    <value>Cannot add binary definition, error: {0}</value>
  </data>
  <data name="Message.BinDefinitionDeleteConfirmation" xml:space="preserve">
    <value>Are you sure you want to delete binary definition {0}?</value>
  </data>
  <data name="BinDefinitionSample" xml:space="preserve">
    <value>// The following example binary definition processes a bitmap file (.BMP)
// and provides information decoded from the bitmap header.

struct BmpHeader 
{
    char[2] descriptor;
    int bmpSizeInBytes;
    short reserved1;
    short reserved2;
    int dataOffset;
};

enum DibHeaderType : byte 
{
 BITMAPCOREHEADER = 1u,
 OS21XBITMAPHEADER = 2u,
 OS22XBITMAPHEADER_V1 = 3u,
 OS22XBITMAPHEADER_V2 = 4u,
 BITMAPINFOHEADER = 5u,
 BITMAPV2INFOHEADER = 6u,
 BITMAPV3INFOHEADER = 7u,
 BITMAPV4HEADER = 8u,
 BITMAPV5HEADER = 9u
};

enum BitmapCompressionMethod : int
{
 BI_RGB = 0,
 BI_RLE8 = 1,
 BI_RLE4 = 2,
 BI_BITFIELDS = 3,
 BI_JPEG = 4,
 BI_PNG = 5,
 BI_ALPHABITFIELDS = 6,
 BI_CMYK = 11,
 BI_CMYKRLE8 = 12,
 BI_CMYKRLE4 = 13
};

enum HalftoningAlgorithm : short
{
 None = 0,
 ErrorDiffusion = 1,
 PANDA = 2,
 SuperCircle = 3
};

struct DibHeader
{
 int headerSize;
 
 if (headerSize == 12)
 {
  show enum DibHeaderType.BITMAPCOREHEADER as headerType;
  ushort bitmapWidth;
  ushort bitmapHeight;
  short colorPlaneCount;
  short bitsPerPixel;
 }
 elseif (headerSize == 64)
 {
  show enum DibHeaderType.OS22XBITMAPHEADER_V1 as headerType;
  int bitmapWidth;
  int bitmapHeight;
  short colorPlaneCount;
  short bitsPerPixel;
  BitmapCompressionMethod compressionMethod;
  int imageSize;
  int horizontalResolution;
  int verticalResolution;
  int colorsInPallette;
  int importantColorCount;
  
  short resolutionUnit;
  short padding;
  short fillDirection;
  HalftoningAlgorithm halftoningAlgorithm;
  int halftoningParameter1;
  int halftoningParameter2;
  int colorEncoding;
  int appDefinedIdentifier;  
 }
 elseif (headerSize == 16)
 {
  show enum DibHeaderType.OS22XBITMAPHEADER_V2 as headerType;
  int bitmapWidth;
  int bitmapHeight;
  short colorPlaneCount;
  short bitsPerPixel;
  BitmapCompressionMethod compressionMethod;
 }
 elseif (headerSize == 40)
 {
  show enum DibHeaderType.BITMAPINFOHEADER as headerType;
  int bitmapWidth;
  int bitmapHeight;
  short colorPlaneCount;
  short bitsPerPixel;
  BitmapCompressionMethod compressionMethod;
  int imageSize;
  int horizontalResolution;
  int verticalResolution;
  int colorsInPallette;
  int importantColorCount;
  
 }
 elseif (headerSize == 52)
 {
     show enum DibHeaderType.BITMAPV2INFOHEADER as headerType;     
 }
 elseif (headerSize == 56)
 {
     show enum DibHeaderType.BITMAPV3INFOHEADER as headerType; 
 }
 elseif (headerSize == 108)
 { 
  show enum DibHeaderType.BITMAPV4HEADER as headerType;
 }
 elseif (headerSize == 124)
 {
     show enum DibHeaderType.BITMAPV5HEADER as headerType;
 }
};

BmpHeader bmpHeader;
DibHeader dibHeader;

show (dibHeader.bitmapWidth * dibHeader.bitmapHeight * dibHeader.bitsPerPixel) / 8 as bitmapByteSize; </value>
  </data>
  <data name="OpenBinaryFile.Title" xml:space="preserve">
    <value>Open binary file {0}</value>
  </data>
  <data name="Ribbon.Home.File.OpenBin" xml:space="preserve">
    <value>Open binary file</value>
  </data>
  <data name="Message.UseSidePanelToOpenBinFile" xml:space="preserve">
    <value>Double-click binary definition to open binary file and analyze it.</value>
  </data>
  <data name="Message.SyntaxError.StructureAlreadyExists" xml:space="preserve">
    <value>Struct with name {0} already exists!</value>
  </data>
  <data name="Message.SyntaxError.InvalidIntegerValue" xml:space="preserve">
    <value>Invalid integer value: {0} !</value>
  </data>
  <data name="Message.SyntaxError.InvalidFloatNumber" xml:space="preserve">
    <value>Invalid floating point value: {0} !</value>
  </data>
  <data name="Message.SyntaxError.FieldAlreadyExists" xml:space="preserve">
    <value>Field with name {0} already exists!</value>
  </data>
  <data name="Message.SyntaxError.CannotFindTypeName" xml:space="preserve">
    <value>Cannot find type name {0} !</value>
  </data>
  <data name="Message.SyntaxError.FailedToProcessDefinition" xml:space="preserve">
    <value>Failed to process definition!</value>
  </data>
  <data name="Message.SyntaxError.SyntaxError" xml:space="preserve">
    <value>Syntax error in definition: {0}</value>
  </data>
  <data name="Message.AnalysisError.CannotAssign" xml:space="preserve">
    <value>Cannot perform assignment to {0}. Reason:
{1}</value>
  </data>
  <data name="Message.AnalysisError.UnexpectedEndOfStream" xml:space="preserve">
    <value>Unexpected end of file!</value>
  </data>
  <data name="Message.AnalysisError.FailedToReadField" xml:space="preserve">
    <value>Failed to read field {0}. Reason:
{1}</value>
  </data>
  <data name="Message.AnalysisError.CannotShow" xml:space="preserve">
    <value>Cannot add evaluated field {0}. Reason:
{1}</value>
  </data>
  <data name="Message.AnalysisError.FailedToSkip" xml:space="preserve">
    <value>Failed to skip bytes. Reason:
{0}</value>
  </data>
  <data name="Message.AnalysisError.FailedToReadStructArray" xml:space="preserve">
    <value>Failed to read struct array field {0}. Reason:
{1}</value>
  </data>
  <data name="Message.AnalysisError.FailedToReadStruct" xml:space="preserve">
    <value>Failed to read struct field {0}. Reason:
{1}</value>
  </data>
  <data name="Message.EvalError.CannotFindIdentifier" xml:space="preserve">
    <value>Cannot find identifier {0} in current scope.</value>
  </data>
  <data name="Message.EvalError.CannotAccessMember" xml:space="preserve">
    <value>Cannot access member {0} of field {1}.</value>
  </data>
  <data name="Message.EvalError.MemberIsNotValue" xml:space="preserve">
    <value>Identifier {0} does not point to a value-type field.</value>
  </data>
  <data name="Message.EvalError.FailedToEvalBinaryOperator" xml:space="preserve">
    <value>Failed to evaluate binary operator. Reason:
{0}</value>
  </data>
  <data name="Message.EvalError.FailedToEvalExpression" xml:space="preserve">
    <value>Failed to evaluate expression. Reason:
{0}</value>
  </data>
  <data name="BottomTool.Messages.Title" xml:space="preserve">
    <value>Messages</value>
  </data>
  <data name="Ribbon.View.BottomPanelVisibility.Visible" xml:space="preserve">
    <value>Visible</value>
  </data>
  <data name="Ribbon.View.BottomPanelVisibility.Hidden" xml:space="preserve">
    <value>Hidden</value>
  </data>
  <data name="Ribbon.View.Interface.BottomPanel" xml:space="preserve">
    <value>Bottom panel</value>
  </data>
  <data name="Messages.Severity" xml:space="preserve">
    <value>Severity</value>
  </data>
  <data name="Messages.Message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="Messages.File" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="Messages.Row" xml:space="preserve">
    <value>Row</value>
  </data>
  <data name="Messages.Column" xml:space="preserve">
    <value>Column</value>
  </data>
  <data name="Messages.Code" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="Message.CannotOpenBinFile" xml:space="preserve">
    <value>Cannot open binary file. See Messages window for details.</value>
  </data>
  <data name="Message.SyntaxError.InvalidUnsignedIntegerValue" xml:space="preserve">
    <value>Invalid unsigned integer value: {0}!</value>
  </data>
  <data name="Message.SyntaxError.InvalidUnsignedEnumItem" xml:space="preserve">
    <value>Unsigned-type enum should contain only unsigned int values (with suffix "u")!</value>
  </data>
  <data name="Message.SyntaxError.InvalidSignedEnumItem" xml:space="preserve">
    <value>Signed-type enum should contain only signed int values!</value>
  </data>
  <data name="Message.SyntaxError.EnumItemValueDuplicated" xml:space="preserve">
    <value>Enum item with value {0} already exists!</value>
  </data>
  <data name="Message.AnalysisError.InvalidIfCondition" xml:space="preserve">
    <value>Condition in if statement must evaluate to bool value!</value>
  </data>
  <data name="Ribbon.ContextGroup.Xml" xml:space="preserve">
    <value>XML</value>
  </data>
  <data name="Ribbon.Tab.XmlTools" xml:space="preserve">
    <value>XML Tools</value>
  </data>
  <data name="Ribbon.XmlTools.Group.Formatting" xml:space="preserve">
    <value>Formatting</value>
  </data>
  <data name="Ribbon.XmlTools.Formatting.Format" xml:space="preserve">
    <value>Format XML</value>
  </data>
  <data name="Message.CannotFormatInvalidXml" xml:space="preserve">
    <value>Cannot format - XML is invalid.</value>
  </data>
  <data name="TextEditor.ContextMenu.Copy" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="TextEditor.ContextMenu.Cut" xml:space="preserve">
    <value>Cut</value>
  </data>
  <data name="TextEditor.ContextMenu.Paste" xml:space="preserve">
    <value>Paste</value>
  </data>
  <data name="Message.ReplacedOccurrences" xml:space="preserve">
    <value>Replaced occurrences: {0}.</value>
  </data>
  <data name="Message.SearchReachedEnd" xml:space="preserve">
    <value>Search reached end of the file. Do you want to continue from the beginning?</value>
  </data>
  <data name="Message.SearchReachedBeginning" xml:space="preserve">
    <value>Search reached beginning of the file. Do you want to continue from the end?</value>
  </data>
  <data name="Message.EvalError.EnumDoesNotContainMember" xml:space="preserve">
    <value>Enum {0} does not contain member {1}.</value>
  </data>
  <data name="Message.SyntaxError.IntegerValueOutsideRange" xml:space="preserve">
    <value>Enum member {0} value ({1}) is outside underlying integer type range ({2})!</value>
  </data>
</root>