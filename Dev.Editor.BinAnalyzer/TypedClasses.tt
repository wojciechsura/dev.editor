<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.IO;
using Dev.Editor.BinAnalyzer.Data;
using Dev.Editor.BinAnalyzer.AnalyzerDefinition.Expressions;
using Dev.Editor.BinAnalyzer.Exceptions;
using Dev.Editor.Resources;
using Dev.Editor.BinAnalyzer.AnalyzerDefinition.Definitions;

<#
    (string type, string name, string readerMethod)[] intTypes = new (string type, string name, string readerMethod)[] 
    {
        ("sbyte", "Sbyte", "ReadSByte"),
        ("short", "Short", "ReadInt16"),
        ("int", "Int", "ReadInt32"),
        ("long", "Long", "ReadInt64"),
    };  

    (string type, string name, string readerMethod)[] uintTypes = new (string type, string name, string readerMethod)[] 
    {
        ("byte", "Byte", "ReadByte"),
        ("ushort", "Ushort", "ReadUInt16"),
        ("uint", "Uint", "ReadUInt32"),
        ("ulong", "Ulong", "ReadUInt64"),
    };  

    IEnumerable<(string type, string name, string readerMethod)> intData = intTypes.Union(uintTypes);

    (string type, string name, string readerMethod)[] floatTypes = new (string type, string name, string readerMethod)[] 
    {        
        ("float", "Float", "ReadSingle"),
        ("double", "Double", "ReadDouble")
    };  

    (string type, string name, string readerMethod)[] otherTypes = new (string type, string name, string readerMethod)[] 
    {        
        ("string", "String", "ReadString"),
        ("bool", "Bool", "ReadBoolean")
    };  


    IEnumerable<(string type, string name, string readerMethod)> data = intTypes.Union(uintTypes).Union(floatTypes).Union(otherTypes);      
#>

namespace Dev.Editor.BinAnalyzer.AnalyzerDefinition.Definitions
{
<#
    foreach (var item in intData)
	{
#>
    class <#=item.name#>EnumItem : BaseEnumItem 
	{
	    public <#=item.name#>EnumItem(string name, <#=item.type#> value)
		    : base(name)
        {
            Value = value;
        }

        public <#=item.type#> Value { get; }
	}

    class <#=item.name#>EnumDefinition : BaseEnumDefinition
    {
        private readonly List<<#=item.name#>EnumItem> items;

        public <#=item.name#>EnumDefinition(string name, List<<#=item.name#>EnumItem> items) 
            : base(name, "<#=item.type#>")
        {
            this.items = items;
        }

		public override BaseData GenerateEnumData(string field, long offset, string memberName)
		{
			var member = items.FirstOrDefault(i => i.Name.Equals(memberName));

			if (member == null)
				throw new ArgumentException("memberName");

			return new <#=item.name#>EnumData(field, offset, Name, member.Value, member.Name);
		}

        public List<<#=item.name#>EnumItem> Items => items;
    }

<#
    }
#>
}

namespace Dev.Editor.BinAnalyzer.AnalyzerDefinition.Statements
{
<#    
    foreach (var item in data)
    {
#>
    class <#=item.name#>FieldStatement : BaseFieldStatement
    {
        public <#=item.name#>FieldStatement(int line, int column, string name)
            : base(line, column, name)
        {
            
        }

        internal override void Read(BinaryReader reader, List<BaseData> result, Scope scope)
        {
            try
            {
                long offset = reader.BaseStream.Position;

<#
                if (item.type != "string")
                {
#>
                if (reader.BaseStream.Position + sizeof(<#=item.type#>) > reader.BaseStream.Length)
                    throw new AnalysisException(Line, Column, "Unexpected end of stream", Strings.Message_AnalysisError_UnexpectedEndOfStream);
<#
                }
#>
                <#=item.type#> value = reader.<#=item.readerMethod#>();

                var data = new <#=item.name#>Data(name, offset, value);
                result.Add(data);
                scope.AddContent(name, data);
            }
            catch (BaseLocalizedException e)
            {
                throw new AnalysisException(Line, Column, "Failed to load field!", string.Format(Strings.Message_AnalysisError_FailedToReadField, name, e.LocalizedErrorMessage));
            }
            catch (Exception e)
            {
                throw new AnalysisException(Line, Column, "Failed to load field!", string.Format(Strings.Message_AnalysisError_FailedToReadField, name, e.Message));
            }
        }
    }

<#
    }

    foreach (var item in data)
    {
#>
    class <#=item.name#>ArrayFieldStatement : BaseFieldStatement
    {
        private readonly Expression count;

        public <#=item.name#>ArrayFieldStatement(int line, int column, string name, Expression count)
            : base(line, column, name)
        {
            this.count = count;
        }

        internal override void Read(BinaryReader reader, List<BaseData> result, Scope scope)
        {
            try
            {
                long arrayOffset = reader.BaseStream.Position;

                dynamic countValue = count.Eval(scope);
                int countInt = (int)countValue;
                
<#
                if (item.type != "string")
                {
#>
                if (reader.BaseStream.Position + sizeof(<#=item.type#>) * countInt > reader.BaseStream.Length)
                    throw new AnalysisException(Line, Column, "Unexpected end of stream", Strings.Message_AnalysisError_UnexpectedEndOfStream);
<#
                }
#>
                var data = new <#=item.name#>Data[countInt];
                for (int i = 0; i < countInt; i++)
                {
                    long itemOffset = reader.BaseStream.Position;
                    <#=item.type#> value = reader.<#=item.readerMethod#>();
                    var element = new <#=item.name#>Data(i.ToString(), itemOffset, value);
                    data[i] = element;
                }

                var item = new ArrayData<<#=item.name#>Data>(name, arrayOffset, "<#=item.name#>", data);

                result.Add(item);
                scope.AddContent(name, item);
            }
            catch (BaseLocalizedException e)
            {
                throw new AnalysisException(Line, Column, "Failed to load field!", string.Format(Strings.Message_AnalysisError_FailedToReadField, name, e.LocalizedErrorMessage));
            }
            catch (Exception e)
            {
                throw new AnalysisException(Line, Column, "Failed to load field!", string.Format(Strings.Message_AnalysisError_FailedToReadField, name, e.Message));
            }
        }
    }

<#
    }

    foreach (var item in intData)
    {
#>

    class <#=item.name#>EnumFieldStatement : BaseFieldStatement
    {
        private readonly <#=item.name#>EnumDefinition enumDef;

        public <#=item.name#>EnumFieldStatement(int line, int column, string name, <#=item.name#>EnumDefinition enumDef)
            : base(line, column, name)
        {
            this.enumDef = enumDef;
        }

        internal override void Read(BinaryReader reader, List<BaseData> result, Scope scope)
        {
            try
            {
                long offset = reader.BaseStream.Position;

                if (reader.BaseStream.Position + sizeof(<#=item.type#>) > reader.BaseStream.Length)
                    throw new AnalysisException(Line, Column, "Unexpected end of stream", Strings.Message_AnalysisError_UnexpectedEndOfStream);

                <#=item.type#> value = reader.<#=item.readerMethod#>();

                var enumItem = enumDef.Items.FirstOrDefault(i => i.Value == value);
                
                var data = new <#=item.name#>EnumData(name, offset, enumDef.Name, value, $"{enumItem?.Name ?? "Invalid enum value"} ({value})");
                result.Add(data);
                scope.AddContent(name, data);
            }
            catch (BaseLocalizedException e)
            {
                throw new AnalysisException(Line, Column, "Failed to load field!", string.Format(Strings.Message_AnalysisError_FailedToReadField, name, e.LocalizedErrorMessage));
            }
            catch (Exception e)
            {
                throw new AnalysisException(Line, Column, "Failed to load field!", string.Format(Strings.Message_AnalysisError_FailedToReadField, name, e.Message));
            }
        }
    }

<#
    }
#>

    class FieldFactory
    {
        public static BaseFieldStatement FromTypeName(int line, int column, string typeName, string name)
        {
            switch (typeName)
            {
<#
foreach (var item in data)
{
#>
                case "<#=item.type#>":
                    return new <#=item.name#>FieldStatement(line, column, name);
<#
}
#>
                case "skip":
                    return new SkipFieldStatement(line, column, name);
                case "char":
                    return new CharFieldStatement(line, column, name);
                default:
                    throw new InvalidEnumArgumentException("Unsupported type name!");
            }
        }        

        public static BaseFieldStatement FromEnum(int line, int column, string name, BaseEnumDefinition enumDef)
        {
            switch (enumDef)
            {
<#
foreach (var item in intData)
{
#>
                case <#=item.name#>EnumDefinition <#=item.type#>EnumDefinition:
                    return new <#=item.name#>EnumFieldStatement(line, column, name, <#=item.type#>EnumDefinition);
<#
}
#>
                default:
                    throw new InvalidEnumArgumentException("Unsupported enum type!");
            }
        }
    }

    class ArrayFieldFactory
    {
        public static BaseFieldStatement FromTypeName(int line, int column, string typeName, string name, Expression count)
        {
            switch (typeName)
            {
<#
foreach (var item in data)
{
#>
                case "<#=item.type#>":
                    return new <#=item.name#>ArrayFieldStatement(line, column, name, count);
<#
}
#>
                case "skip":
                    return new SkipArrayFieldStatement(line, column, name, count);
                case "char":
                    return new CharArrayFieldStatement(line, column, name, count);
                default:
                    throw new InvalidEnumArgumentException("Unsupported type name!");
            }
        }
    }
}

namespace Dev.Editor.BinAnalyzer.Data
{
<#  
    foreach (var item in data)
    {
        var t = item.type;
        var n = item.name;
#>
    public class <#=n#>Data : BaseValueData
    {       
        private readonly <#=t#> value;

        public <#=n#>Data(string name, long offset, <#=t#> value)
            : base(name, offset, "<#=t#>")
        {
            this.value = value;
        }

        public override dynamic GetValue()
        {
            return value;
        }
    }

<#
    }

    foreach (var item in intData)
    {
#>

    public class <#=item.name#>EnumData : BaseValueData
    {
        private readonly <#=item.type#> value;
        private readonly string enumValue;

        public <#=item.name#>EnumData(string name, long offset, string enumName, <#=item.type#> value, string enumValue)
            : base(name, offset, $"{enumName} : byte")
        {
            this.value = value;
            this.enumValue = enumValue;
        }

        public override dynamic GetValue()
        {
            return value;
        }

        public override string Value => enumValue;
    }

<#  
    }
#>
    public class DataFactory
    {
        public static BaseData DataFromDynamic(string name, long offset, dynamic d)
        {
            <#
            foreach (var item in data)
            {
                #>
if (d is <#=item.type#> <#=item.type#>Dynamic)
                return new <#=item.name#>Data(name, offset, <#=item.type#>Dynamic);
            else <#
            }
#> if (d is char[] chars)
                return new CharArrayData(name, offset, chars);
            else
                throw new InvalidOperationException("Unsupported type!");
        }
    }
}